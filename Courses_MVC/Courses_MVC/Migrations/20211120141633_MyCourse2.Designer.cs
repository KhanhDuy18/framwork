// <auto-generated />
using System;
using Courses_MVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Courses_MVC.Migrations
{
    [DbContext(typeof(CoursesContext))]
    [Migration("20211120141633_MyCourse2")]
    partial class MyCourse2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Courses_MVC.Models.Comment", b =>
                {
                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<float>("evaluate")
                        .HasColumnType("float");

                    b.HasKey("courseId", "userId");

                    b.HasIndex("userId");

                    b.ToTable("comment");
                });

            modelBuilder.Entity("Courses_MVC.Models.Course", b =>
                {
                    b.Property<int>("courseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("courseName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("discountId")
                        .HasColumnType("int");

                    b.Property<string>("discription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("imgCourse")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("originalPrice")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("topicId")
                        .HasColumnType("int");

                    b.Property<int>("totalStudent")
                        .HasColumnType("int");

                    b.Property<DateTime>("totalTime")
                        .HasColumnType("date");

                    b.HasKey("courseId");

                    b.HasIndex("discountId");

                    b.HasIndex("topicId");

                    b.ToTable("course");
                });

            modelBuilder.Entity("Courses_MVC.Models.Discount", b =>
                {
                    b.Property<int>("discountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("discription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<float>("sale")
                        .HasColumnType("float");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime");

                    b.HasKey("discountId");

                    b.ToTable("discount");
                });

            modelBuilder.Entity("Courses_MVC.Models.Exercise", b =>
                {
                    b.Property<int>("exerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("deadline")
                        .HasColumnType("date");

                    b.Property<int>("lessonId")
                        .HasColumnType("int");

                    b.Property<int>("teacherId")
                        .HasColumnType("int");

                    b.HasKey("exerciseId");

                    b.HasIndex("lessonId");

                    b.HasIndex("teacherId");

                    b.ToTable("exercise");
                });

            modelBuilder.Entity("Courses_MVC.Models.ExerciseInUser", b =>
                {
                    b.Property<int>("studentId")
                        .HasColumnType("int");

                    b.Property<int>("exerciseId")
                        .HasColumnType("int");

                    b.Property<float>("scores")
                        .HasColumnType("float");

                    b.Property<DateTime>("submit")
                        .HasColumnType("datetime");

                    b.HasKey("studentId", "exerciseId");

                    b.HasIndex("exerciseId");

                    b.ToTable("exerciseInUser");
                });

            modelBuilder.Entity("Courses_MVC.Models.Lesson", b =>
                {
                    b.Property<int>("lessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("lessonId");

                    b.HasIndex("courseId");

                    b.ToTable("lesson");
                });

            modelBuilder.Entity("Courses_MVC.Models.Receipt", b =>
                {
                    b.Property<int>("receiptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("registerId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.Property<DateTime>("timeReceipt")
                        .HasColumnType("datetime");

                    b.Property<float>("totalPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0f);

                    b.HasKey("receiptId");

                    b.HasIndex("registerId");

                    b.ToTable("receipt");
                });

            modelBuilder.Entity("Courses_MVC.Models.Register", b =>
                {
                    b.Property<int>("registerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("courseId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("text");

                    b.Property<DateTime>("timeReg")
                        .HasColumnType("datetime");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("registerId");

                    b.HasIndex("courseId");

                    b.HasIndex("userId");

                    b.ToTable("register");
                });

            modelBuilder.Entity("Courses_MVC.Models.Role", b =>
                {
                    b.Property<int>("roleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("discription")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("nameRole")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("roleId");

                    b.ToTable("role");
                });

            modelBuilder.Entity("Courses_MVC.Models.Topic", b =>
                {
                    b.Property<int>("topicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("topicName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("topicId");

                    b.ToTable("topic");
                });

            modelBuilder.Entity("Courses_MVC.Models.User", b =>
                {
                    b.Property<int>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<DateTime>("birthday")
                        .HasColumnType("datetime");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<int>("gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasMaxLength(10)
                        .HasDefaultValue(0);

                    b.Property<string>("mail")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("qualification")
                        .HasColumnType("text");

                    b.Property<int>("roleId")
                        .HasColumnType("int");

                    b.Property<int?>("salary")
                        .HasColumnType("int");

                    b.Property<string>("sdt")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("startWorking")
                        .HasColumnType("datetime");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.Property<string>("userPassword")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasMaxLength(45);

                    b.HasKey("userId");

                    b.HasIndex("roleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Courses_MVC.Models.Comment", b =>
                {
                    b.HasOne("Courses_MVC.Models.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Courses_MVC.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses_MVC.Models.Course", b =>
                {
                    b.HasOne("Courses_MVC.Models.Discount", "Discount")
                        .WithMany("Courses")
                        .HasForeignKey("discountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Courses_MVC.Models.Topic", "Topic")
                        .WithMany("Course")
                        .HasForeignKey("topicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses_MVC.Models.Exercise", b =>
                {
                    b.HasOne("Courses_MVC.Models.Lesson", "Lesson")
                        .WithMany("Exercises")
                        .HasForeignKey("lessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Courses_MVC.Models.User", "User")
                        .WithMany("Exercises")
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses_MVC.Models.ExerciseInUser", b =>
                {
                    b.HasOne("Courses_MVC.Models.Exercise", "Exercise")
                        .WithMany("ExerciseInUsers")
                        .HasForeignKey("exerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Courses_MVC.Models.User", "User")
                        .WithMany("ExerciseInUsers")
                        .HasForeignKey("studentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses_MVC.Models.Lesson", b =>
                {
                    b.HasOne("Courses_MVC.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses_MVC.Models.Receipt", b =>
                {
                    b.HasOne("Courses_MVC.Models.Register", "Register")
                        .WithMany("Receipts")
                        .HasForeignKey("registerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses_MVC.Models.Register", b =>
                {
                    b.HasOne("Courses_MVC.Models.Course", "Course")
                        .WithMany("Registers")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Courses_MVC.Models.User", "User")
                        .WithMany("Registers")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Courses_MVC.Models.User", b =>
                {
                    b.HasOne("Courses_MVC.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("roleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
